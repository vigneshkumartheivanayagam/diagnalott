{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport Header from '../Header';\nimport Contents from './Contents';\nimport { useDispatch } from 'react-redux';\nimport { addContents } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst divStyle = {\n  color: 'blue',\n  height: '250px',\n  textAlign: 'center',\n  padding: '5px 10px',\n  background: '#eee',\n  marginTop: '15px'\n};\nconst containerStyle = {\n  maxWidth: '1280px',\n  margin: '0 auto'\n};\n\nfunction Home(props) {\n  _s();\n\n  // const dispatch = useDispatch()\n  // let hasMore = React.useRef(true)\n  // let page = React.useRef(1)\n  // const [loading, setLoading] = React.useState(false)\n  // React.useEffect(() => {\n  //     var el = document.getElementById('content')\n  //     el.addEventListener('scroll', handleScroll)\n  //     window['scrollTo']({ top: 0, behavior: 'smooth' })\n  //     setTimeout(function() {\n  //         getContent()\n  //     }, 1000)\n  //     return () => {\n  //         page.current = 1\n  //         hasMore.current = true\n  //     }\n  // }, [])\n  // const getContent = async () => {\n  //     if (!loading && hasMore.current) {\n  //         setLoading(true)\n  //         try {\n  //             if (page.current === 1) {\n  //                 dispatch(addContents([]))\n  //             }\n  //             let url = 'data/CONTENTLISTINGPAGE-PAGE' + page.current+'.json'\n  //             const result = await axios.get(url);\n  //             if (result !== undefined && result !== null && result.status !== undefined && result.status !== null && result.status === 200 && result.data !== undefined && result.data !== null && result.data.page !== undefined && result.data.page !== null && result.data.page['content-items'] !== undefined && result.data.page['content-items'] !== null && result.data.page['content-items'].content !== undefined && result.data.page['content-items'].content !== null && result.data.page['content-items'].content.length > 0) {\n  //                 page.current = parseInt(page.current) + 1\n  //                 dispatch(addContents(result.data.page['content-items'].content))\n  //             } else {\n  //                 hasMore.current = false\n  //             }\n  //             setLoading(false)\n  //         } catch(e) {\n  //             hasMore.current = false\n  //             setLoading(false)\n  //         }\n  //     }\n  // }\n  // const handleScroll = (e) => {\n  //     // if (window.innerHeight + window.scrollY >= (document.body.offsetHeight - 10)) {\n  //     //     alert(\"Condition satisfied\")\n  //     //     getContent()\n  //     // }\n  //     // var pageHeight = document.documentElement.offsetHeight,\n  //     //     windowHeight = window.innerHeight,\n  //     //     scrollPosition = window.scrollY || window.pageYOffset || document.body.scrollTop + (document.documentElement && document.documentElement.scrollTop || 0);\n  //     // // document.getElementById(\"val\").innerHTML = pageHeight + ',' + windowHeight + ',' + scrollPosition;\n  //     // if (pageHeight <= windowHeight + scrollPosition) {\n  //     //     alert('At the bottom');\n  //     //     getContent()\n  //     // }\n  //     // const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n  //     // console.log(\"bottom ===> \", bottom)\n  //     // if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n  //     //     getContent()\n  //     // }\n  //     // var content = document.getElementById('content')\n  //     // var contentHeight = content.offsetHeight\n  //     // var yOffset = window.pageYOffset\n  //     // var y = yOffset + window.innerHeight\n  //     // if(y >= contentHeight) {\n  //     //     getContent()\n  //     // }\n  //     // const scrollbale = document.documentElement.scrollHeight - window.innerHeight\n  //     // const scrolled = window.scrollY\n  //     // if(scrolled === scrollbale) {\n  //     //     getContent()\n  //     // }\n  //     if (e.target.offsetHeight + e.target.scrollTop >= e.target.clientHeight) {  \n  //         getContent()\n  //     }\n  // };\n  const [postList, setPostList] = React.useState({\n    list: [1, 2, 3, 4]\n  }); // tracking on which page we currently are\n\n  const [page, setPage] = React.useState(1); // add loader reference\n\n  const loader = React.useRef(null); // here we handle what happens when user scrolls to Load More div\n  // in this case we just update page variable\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(_page => _page + 1);\n    }\n  };\n\n  React.useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 1.0\n    }; // initialize IntersectionObserver and attaching to Load More div\n\n    const observer = new IntersectionObserver(handleObserver, options);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  React.useEffect(() => {\n    // here we simulate adding new posts to List\n    const newList = postList.list.concat([1, 1, 1, 1]);\n    setPostList({\n      list: newList\n    });\n  }, [page, postList.list]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [postList.list.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        ref: loader,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Load More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"5Aq0BYg33u8wJLRIKNzDgDAmi/A=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/index.js"],"names":["React","axios","Header","Contents","useDispatch","addContents","divStyle","color","height","textAlign","padding","background","marginTop","containerStyle","maxWidth","margin","Home","props","postList","setPostList","useState","list","page","setPage","loader","useRef","handleObserver","entities","target","isIntersecting","_page","useEffect","options","root","rootMargin","threshold","observer","IntersectionObserver","current","observe","newList","concat","map","post","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport Header from '../Header'\nimport Contents from './Contents'\nimport { useDispatch } from 'react-redux'\nimport { addContents } from \"../../actions\"\n\n\nconst divStyle = {\n    color: 'blue',\n    height: '250px',\n    textAlign: 'center',\n    padding: '5px 10px',\n    background: '#eee',\n    marginTop: '15px'\n};\n\n\nconst containerStyle = {\n    maxWidth: '1280px',\n    margin: '0 auto',\n}\n\nfunction Home(props) {\n\n    // const dispatch = useDispatch()\n    // let hasMore = React.useRef(true)\n    // let page = React.useRef(1)\n    // const [loading, setLoading] = React.useState(false)\n\n    // React.useEffect(() => {\n\n    //     var el = document.getElementById('content')\n    //     el.addEventListener('scroll', handleScroll)\n    //     window['scrollTo']({ top: 0, behavior: 'smooth' })\n\n    //     setTimeout(function() {\n    //         getContent()\n    //     }, 1000)\n\n    //     return () => {\n    //         page.current = 1\n    //         hasMore.current = true\n    //     }\n    // }, [])\n\n    // const getContent = async () => {\n\n    //     if (!loading && hasMore.current) {\n    //         setLoading(true)\n    //         try {\n    //             if (page.current === 1) {\n    //                 dispatch(addContents([]))\n    //             }\n    //             let url = 'data/CONTENTLISTINGPAGE-PAGE' + page.current+'.json'\n    //             const result = await axios.get(url);\n    //             if (result !== undefined && result !== null && result.status !== undefined && result.status !== null && result.status === 200 && result.data !== undefined && result.data !== null && result.data.page !== undefined && result.data.page !== null && result.data.page['content-items'] !== undefined && result.data.page['content-items'] !== null && result.data.page['content-items'].content !== undefined && result.data.page['content-items'].content !== null && result.data.page['content-items'].content.length > 0) {\n    //                 page.current = parseInt(page.current) + 1\n    //                 dispatch(addContents(result.data.page['content-items'].content))\n    //             } else {\n    //                 hasMore.current = false\n    //             }\n    //             setLoading(false)\n    //         } catch(e) {\n    //             hasMore.current = false\n    //             setLoading(false)\n    //         }\n    //     }\n    // }\n\n    // const handleScroll = (e) => {\n    //     // if (window.innerHeight + window.scrollY >= (document.body.offsetHeight - 10)) {\n    //     //     alert(\"Condition satisfied\")\n    //     //     getContent()\n    //     // }\n\n    //     // var pageHeight = document.documentElement.offsetHeight,\n    //     //     windowHeight = window.innerHeight,\n    //     //     scrollPosition = window.scrollY || window.pageYOffset || document.body.scrollTop + (document.documentElement && document.documentElement.scrollTop || 0);\n\n    //     // // document.getElementById(\"val\").innerHTML = pageHeight + ',' + windowHeight + ',' + scrollPosition;\n\n\n    //     // if (pageHeight <= windowHeight + scrollPosition) {\n    //     //     alert('At the bottom');\n    //     //     getContent()\n    //     // }\n\n    //     // const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    //     // console.log(\"bottom ===> \", bottom)\n\n    //     // if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n    //     //     getContent()\n    //     // }\n\n    //     // var content = document.getElementById('content')\n    //     // var contentHeight = content.offsetHeight\n    //     // var yOffset = window.pageYOffset\n    //     // var y = yOffset + window.innerHeight\n\n    //     // if(y >= contentHeight) {\n    //     //     getContent()\n    //     // }\n\n    //     // const scrollbale = document.documentElement.scrollHeight - window.innerHeight\n    //     // const scrolled = window.scrollY\n\n    //     // if(scrolled === scrollbale) {\n    //     //     getContent()\n    //     // }\n\n    //     if (e.target.offsetHeight + e.target.scrollTop >= e.target.clientHeight) {  \n    //         getContent()\n    //     }\n\n    // };\n\n\n\n\n\n\n    const [postList, setPostList] = React.useState({ list: [1, 2, 3, 4] })\n    // tracking on which page we currently are\n    const [page, setPage] = React.useState(1)\n    // add loader reference\n    const loader = React.useRef(null)\n    // here we handle what happens when user scrolls to Load More div\n    // in this case we just update page variable\n    const handleObserver = (entities) => {\n        const target = entities[0]\n        if (target.isIntersecting) {\n            setPage(_page => _page + 1)\n        }\n    }\n\n    React.useEffect(() => {\n        const options = {\n            root: null,\n            rootMargin: '20px',\n            threshold: 1.0,\n        }\n        // initialize IntersectionObserver and attaching to Load More div\n        const observer = new IntersectionObserver(handleObserver, options)\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n    }, [])\n\n    React.useEffect(() => {\n        // here we simulate adding new posts to List\n        const newList = postList.list.concat([1, 1, 1, 1])\n        setPostList({\n            list: newList,\n        })\n    }, [page, postList.list])\n\n    return (\n        <div className=\"container\" style={containerStyle}>\n            <div className=\"post-list\">\n                {postList.list.map((post, index) => (\n                    <div key={index} className=\"post\" style={divStyle}>\n                        <h2>{post}</h2>\n                    </div>\n                ))}\n                <div className=\"loading\" ref={loader}>\n                    <h2>Load More</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Home"]},"metadata":{},"sourceType":"module"}