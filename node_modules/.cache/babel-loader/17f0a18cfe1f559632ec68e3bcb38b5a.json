{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/Contents.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport List from './List';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Contents(props) {\n  _s();\n\n  let contents = useSelector(state => state.contentReducer.contents);\n  let filteredContents = useSelector(state => state.contentReducer.filtered);\n  let searchKey = useSelector(state => state.contentReducer.searchKey);\n\n  if (searchKey !== '') {\n    contents = filteredContents;\n    window['scrollTo']({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: contents.length //This is important field to render the next data\n        ,\n        next: props.getContent(),\n        hasMore: props.hasMore,\n        children: contents.length > 0 && contents.map((content, index) => {\n          return /*#__PURE__*/_jsxDEV(List, { ...content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Contents, \"0zjvcrrDOBQMes8+vkEZ7ND5rPE=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = Contents;\nexport default Contents;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contents\");","map":{"version":3,"sources":["/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/Contents.js"],"names":["React","useSelector","List","InfiniteScroll","Contents","props","contents","state","contentReducer","filteredContents","filtered","searchKey","window","top","behavior","length","getContent","hasMore","map","content","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAErB,MAAIC,QAAQ,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBF,QAA/B,CAA1B;AACA,MAAIG,gBAAgB,GAAGR,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBE,QAA/B,CAAlC;AACA,MAAIC,SAAS,GAAGV,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBG,SAA/B,CAA3B;;AAEA,MAAIA,SAAS,KAAK,EAAlB,EAAsB;AAClBL,IAAAA,QAAQ,GAAGG,gBAAX;AACAG,IAAAA,MAAM,CAAC,UAAD,CAAN,CAAmB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,QAAQ,EAAE;AAApB,KAAnB;AACH;;AAED,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA,6BACI,QAAC,cAAD;AACI,QAAA,UAAU,EAAER,QAAQ,CAACS,MADzB,CACiC;AADjC;AAEI,QAAA,IAAI,EAAEV,KAAK,CAACW,UAAN,EAFV;AAGI,QAAA,OAAO,EAAEX,KAAK,CAACY,OAHnB;AAAA,kBAKKX,QAAQ,CAACS,MAAT,GAAkB,CAAlB,IACGT,QAAQ,CAACY,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC7B,8BACI,QAAC,IAAD,OAAsBD;AAAtB,aAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGH,SAJD;AANR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA9BQhB,Q;UAEUH,W,EACQA,W,EACPA,W;;;KAJXG,Q;AAgCT,eAAeA,QAAf","sourcesContent":["import React from  'react'\nimport { useSelector } from 'react-redux'\nimport List from './List'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nfunction Contents(props) {\n\n    let contents = useSelector(state => state.contentReducer.contents)\n    let filteredContents = useSelector(state => state.contentReducer.filtered)\n    let searchKey = useSelector(state => state.contentReducer.searchKey)\n\n    if (searchKey !== '') {\n        contents = filteredContents\n        window['scrollTo']({ top: 0, behavior: 'smooth' })\n    }\n\n    return (\n        <React.Fragment>\n            <div class='row'>\n                <InfiniteScroll\n                    dataLength={contents.length} //This is important field to render the next data\n                    next={props.getContent()}\n                    hasMore={props.hasMore}\n                >\n                    {contents.length > 0 && (\n                        contents.map((content, index) => {\n                            return (\n                                <List key={index} {...content} />\n                            )\n                        })\n                    )}\n                </InfiniteScroll>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Contents"]},"metadata":{},"sourceType":"module"}