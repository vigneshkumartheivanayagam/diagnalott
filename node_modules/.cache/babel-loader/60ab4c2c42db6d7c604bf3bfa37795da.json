{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport Header from '../Header';\nimport Contents from './Contents';\nimport { useDispatch } from 'react-redux';\nimport { addContents } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home(props) {\n  _s();\n\n  // const dispatch = useDispatch()\n  // let hasMore = React.useRef(true)\n  // let page = React.useRef(1)\n  // const [loading, setLoading] = React.useState(false)\n  // React.useEffect(() => {\n  //     var el = document.getElementById('content')\n  //     el.addEventListener('scroll', handleScroll)\n  //     window['scrollTo']({ top: 0, behavior: 'smooth' })\n  //     setTimeout(function() {\n  //         getContent()\n  //     }, 1000)\n  //     return () => {\n  //         page.current = 1\n  //         hasMore.current = true\n  //     }\n  // }, [])\n  // const getContent = async () => {\n  //     if (!loading && hasMore.current) {\n  //         setLoading(true)\n  //         try {\n  //             if (page.current === 1) {\n  //                 dispatch(addContents([]))\n  //             }\n  //             let url = 'data/CONTENTLISTINGPAGE-PAGE' + page.current+'.json'\n  //             const result = await axios.get(url);\n  //             if (result !== undefined && result !== null && result.status !== undefined && result.status !== null && result.status === 200 && result.data !== undefined && result.data !== null && result.data.page !== undefined && result.data.page !== null && result.data.page['content-items'] !== undefined && result.data.page['content-items'] !== null && result.data.page['content-items'].content !== undefined && result.data.page['content-items'].content !== null && result.data.page['content-items'].content.length > 0) {\n  //                 page.current = parseInt(page.current) + 1\n  //                 dispatch(addContents(result.data.page['content-items'].content))\n  //             } else {\n  //                 hasMore.current = false\n  //             }\n  //             setLoading(false)\n  //         } catch(e) {\n  //             hasMore.current = false\n  //             setLoading(false)\n  //         }\n  //     }\n  // }\n  // const handleScroll = (e) => {\n  //     // if (window.innerHeight + window.scrollY >= (document.body.offsetHeight - 10)) {\n  //     //     alert(\"Condition satisfied\")\n  //     //     getContent()\n  //     // }\n  //     // var pageHeight = document.documentElement.offsetHeight,\n  //     //     windowHeight = window.innerHeight,\n  //     //     scrollPosition = window.scrollY || window.pageYOffset || document.body.scrollTop + (document.documentElement && document.documentElement.scrollTop || 0);\n  //     // // document.getElementById(\"val\").innerHTML = pageHeight + ',' + windowHeight + ',' + scrollPosition;\n  //     // if (pageHeight <= windowHeight + scrollPosition) {\n  //     //     alert('At the bottom');\n  //     //     getContent()\n  //     // }\n  //     // const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n  //     // console.log(\"bottom ===> \", bottom)\n  //     // if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n  //     //     getContent()\n  //     // }\n  //     // var content = document.getElementById('content')\n  //     // var contentHeight = content.offsetHeight\n  //     // var yOffset = window.pageYOffset\n  //     // var y = yOffset + window.innerHeight\n  //     // if(y >= contentHeight) {\n  //     //     getContent()\n  //     // }\n  //     // const scrollbale = document.documentElement.scrollHeight - window.innerHeight\n  //     // const scrolled = window.scrollY\n  //     // if(scrolled === scrollbale) {\n  //     //     getContent()\n  //     // }\n  //     if (e.target.offsetHeight + e.target.scrollTop >= e.target.clientHeight) {  \n  //         getContent()\n  //     }\n  // };\n  const [postList, setPostList] = React.useState({\n    list: [1, 2, 3, 4]\n  }); // tracking on which page we currently are\n\n  const [page, setPage] = React.useState(1); // add loader refrence \n\n  const loader = React.useRef(null);\n  React.useEffect(() => {\n    var options = {\n      root: null,\n      rootMargin: \"20px\",\n      threshold: 1.0\n    }; // initialize IntersectionObserver\n    // and attaching to Load More div\n\n    const observer = new IntersectionObserver(handleObserver, options);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  React.useEffect(() => {\n    // here we simulate adding new posts to List\n    const newList = postList.list.concat([1, 1, 1, 1]);\n    setPostList({\n      list: newList\n    });\n  }, [page]); // here we handle what happens when user scrolls to Load More div\n  // in this case we just update page variable\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(page => page + 1);\n    }\n  }; // return (\n  //     <React.Fragment>\n  //         <Header />\n  //         <div className=\"container contentsection\" id='content'>\n  //             <Contents getContent={getContent} hasMore={hasMore} />\n  //         </div>\n  //     </React.Fragment>\n  // )\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [postList.list.map((post, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          style: divStyle,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" \", post, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 33\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        ref: loader,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Load More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"Zr/g2Al0ZZPorsZLjCmj1u/Tw40=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/vignesh/personal/diagnal-ott-without-tailwind/src/views/Home/index.js"],"names":["React","axios","Header","Contents","useDispatch","addContents","Home","props","postList","setPostList","useState","list","page","setPage","loader","useRef","useEffect","options","root","rootMargin","threshold","observer","IntersectionObserver","handleObserver","current","observe","newList","concat","entities","target","isIntersecting","containerStyle","map","post","index","divStyle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport Header from '../Header'\nimport Contents from './Contents'\nimport { useDispatch } from 'react-redux'\nimport { addContents } from \"../../actions\"\n\nfunction Home(props) {\n\n    // const dispatch = useDispatch()\n    // let hasMore = React.useRef(true)\n    // let page = React.useRef(1)\n    // const [loading, setLoading] = React.useState(false)\n\n    // React.useEffect(() => {\n\n    //     var el = document.getElementById('content')\n    //     el.addEventListener('scroll', handleScroll)\n    //     window['scrollTo']({ top: 0, behavior: 'smooth' })\n\n    //     setTimeout(function() {\n    //         getContent()\n    //     }, 1000)\n\n    //     return () => {\n    //         page.current = 1\n    //         hasMore.current = true\n    //     }\n    // }, [])\n\n    // const getContent = async () => {\n\n    //     if (!loading && hasMore.current) {\n    //         setLoading(true)\n    //         try {\n    //             if (page.current === 1) {\n    //                 dispatch(addContents([]))\n    //             }\n    //             let url = 'data/CONTENTLISTINGPAGE-PAGE' + page.current+'.json'\n    //             const result = await axios.get(url);\n    //             if (result !== undefined && result !== null && result.status !== undefined && result.status !== null && result.status === 200 && result.data !== undefined && result.data !== null && result.data.page !== undefined && result.data.page !== null && result.data.page['content-items'] !== undefined && result.data.page['content-items'] !== null && result.data.page['content-items'].content !== undefined && result.data.page['content-items'].content !== null && result.data.page['content-items'].content.length > 0) {\n    //                 page.current = parseInt(page.current) + 1\n    //                 dispatch(addContents(result.data.page['content-items'].content))\n    //             } else {\n    //                 hasMore.current = false\n    //             }\n    //             setLoading(false)\n    //         } catch(e) {\n    //             hasMore.current = false\n    //             setLoading(false)\n    //         }\n    //     }\n    // }\n\n    // const handleScroll = (e) => {\n    //     // if (window.innerHeight + window.scrollY >= (document.body.offsetHeight - 10)) {\n    //     //     alert(\"Condition satisfied\")\n    //     //     getContent()\n    //     // }\n\n    //     // var pageHeight = document.documentElement.offsetHeight,\n    //     //     windowHeight = window.innerHeight,\n    //     //     scrollPosition = window.scrollY || window.pageYOffset || document.body.scrollTop + (document.documentElement && document.documentElement.scrollTop || 0);\n\n    //     // // document.getElementById(\"val\").innerHTML = pageHeight + ',' + windowHeight + ',' + scrollPosition;\n\n\n    //     // if (pageHeight <= windowHeight + scrollPosition) {\n    //     //     alert('At the bottom');\n    //     //     getContent()\n    //     // }\n\n    //     // const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    //     // console.log(\"bottom ===> \", bottom)\n\n    //     // if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n    //     //     getContent()\n    //     // }\n\n    //     // var content = document.getElementById('content')\n    //     // var contentHeight = content.offsetHeight\n    //     // var yOffset = window.pageYOffset\n    //     // var y = yOffset + window.innerHeight\n\n    //     // if(y >= contentHeight) {\n    //     //     getContent()\n    //     // }\n\n    //     // const scrollbale = document.documentElement.scrollHeight - window.innerHeight\n    //     // const scrolled = window.scrollY\n\n    //     // if(scrolled === scrollbale) {\n    //     //     getContent()\n    //     // }\n\n    //     if (e.target.offsetHeight + e.target.scrollTop >= e.target.clientHeight) {  \n    //         getContent()\n    //     }\n\n    // };\n\n\n\n\n\n\n    const [postList, setPostList] = React.useState({\n        list: [1, 2, 3, 4]\n    });\n    // tracking on which page we currently are\n    const [page, setPage] = React.useState(1);\n    // add loader refrence \n    const loader = React.useRef(null);\n\n    React.useEffect(() => {\n        var options = {\n            root: null,\n            rootMargin: \"20px\",\n            threshold: 1.0\n        };\n        // initialize IntersectionObserver\n        // and attaching to Load More div\n        const observer = new IntersectionObserver(handleObserver, options);\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n\n    }, []);\n\n\n    React.useEffect(() => {\n        // here we simulate adding new posts to List\n        const newList = postList.list.concat([1, 1, 1, 1]);\n        setPostList({\n            list: newList\n        })\n    }, [page])\n\n    // here we handle what happens when user scrolls to Load More div\n    // in this case we just update page variable\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        if (target.isIntersecting) {\n            setPage((page) => page + 1)\n        }\n    }\n\n\n    // return (\n    //     <React.Fragment>\n    //         <Header />\n    //         <div className=\"container contentsection\" id='content'>\n    //             <Contents getContent={getContent} hasMore={hasMore} />\n    //         </div>\n    //     </React.Fragment>\n        \n    // )\n\n    return (\n        <div className=\"container\" style={containerStyle}>\n            <div className=\"post-list\">\n                {\n                    postList.list.map((post, index) => {\n                        return (<div key={index} className=\"post\" style={divStyle}>\n                            <h2> {post} </h2>\n                        </div>)\n                    })\n                }\n\n                <div className=\"loading\" ref={loader}>\n                    <h2>Load More</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Home"]},"metadata":{},"sourceType":"module"}